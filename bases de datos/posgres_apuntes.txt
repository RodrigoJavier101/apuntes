WSX2022z.

sudo apt install postgresql postgresql-contrib
 
>>>sudo -i -u postgres  		// entra en la cuenta de postgres
>>>psql					// en tra en el postgres prompt

sudo -u postgres psql 		// entra directo al prompt

\q					///salir




postgres=# \c titan
titan=# \dt

sudo -u postgres createuser --interactive		/////create una new user
crear name:::::
??superuser????

sudo -u postgres createdb <nombre de la ddbbb>
sudo -u postgres psql     //// al prompt
>>> \conninfo   //// salir

sudo -u <user> psql ///// entra en el prompt del user
/l					// lista las ddbb

create database <nombre de la ddbb>;




sudo -u postgres psql
\l
\q
\d  ///busca relaciones
\?
\i /users/person.sql
\x expanded display on

alter user postgres with password 'gigio';


create table users (
  id serial not null,
  name text,
  username text, 
  password text,
  user_type int,
  refresh_token text
);

insert into users (name,  username,   password,  user_type,  refresh_token)
values ('Adminstrator', 'admin', '123', 5001, '123');

select * from users;

sudo apt install pgadmin4

COALESCE
si coalesce(null, 1)  goto second parameter
select email from person;
select coalesce(email) from person;
select coalesce(email, 'email not provided') from person;


NULLIF
si son iguales no elige nada es null, si son distintos elige el primero
select 10 / 0;
select NULLIF(10, ); ///toma dos argumentos 

select coalesce(10 / NULLIF(0,0), 0); permite retornar 0 en vez de un error y coalesce permite retornar 0 en vez de null.


TIMESTAMPS AND DATES
select now();
select now()::DATE;
select now()::TIME;

\d person   //describe table person

ADDING AND SUBSTRACTIN DATES
select now() -/+ interval '1 year';
select now() -/+ interval '1 month';
select now() -/+ interval '1 day';

select now()::date  + interval '10 month';
select ( now() + interval '10 month' )::date;


EXTRACTING FIELD
extract specific values from a date
select now()
select extract(year from now());
select extract(month from now());
select extract(day from now());
select extract(dow from now());  /day of the week  sunday is 0 so for....
select extract(century from now());

AGE FUNCTION
select age(now(), date_of_birth);   ///toma 2 argumentos

PRIMARY KEYS
ID BIGSERIAL NOY NULL PRIMARY KEY 
alter table person drop constraint person_pkey

ADDING PRIMARY KEY 
alter table person add primary key (id);     ///// recieves an array of values for compose multiple columns

UNIQUE CONSTRAINTS
select email, count(*) from person group by  email having count(*) > 1;
alter table person add constraint unique_email_address UNIQUE (email);
alter table person drop constraint unique_email_address;
alter table person add unique (email); /// the name is given by postgress


CHECK CONSTRAINTS
permits add a constraint based in a boolean condition
select UNIQUE gender from person;
select DISTINCT gender from person;
alter table person add constraint gender_constraint CHECK (gender = 'Female' or gender = 'Male' )


UPDATE
update person set email = 'oamr@htomal.com', first_name = 'smith' where id = 2011;



ON CONFLICT DO NOTHING
for duplicate errores o exceptions
insert ... on conflict (id) do nothing;   // the column must be unique

UPSERT





CREATE A TABLE

create table tname(
id bigserial not null primary key,
first_name varchar(50),
date_of_birth date not null 

INSERT
insert into person (    date '1988-01-09'    );

MOCKAROO

COMPARISON OPERATORS
select 1 = 1;

LIMIT, OFFSET, FETCH
select * from person limit 10;
select * from person offset 10;
select * from person offset 5 fetch first 5 row only;
select * from person offset 10 limit 10 ;


IN
select * from person where country in ('China', 'Brazil');

BETWEEN
select * from person where date_of_birth between '2000-01-01' and '1990-01-10';

LIKE / ILIKE
like '%'
like '____hola'

ILIKE   ///ignore case

GROUP BY HAVING
having count(*) > 5 


MAX
select max(price) from car;   //min avg
select round(avg(price));

select make, model, min(price) from car group by make, model;

SUM
select sum(price) from car;
select make, sum(price) from car group by make;

MATH
select 10 / 2;
select 12!;
select 10%3;  // es el modulo

ROUND
select price, price * .10 from car;  round(price * .10, 2)

DELETING RECORDS WITH FOREIGN KEYS



EXPORTING QUERY RESULTS TO CSV
\copy (select * from person) to '/users/amigoscode/Desktop/results.csv' delimiter ',' CSV HEADER;

SERIAL & SEQUENCES
select * from person_id_seq;
alter sequence person_id_seq restart with 10:

EXTENSOIONS
select * from pg.available_extensions;

UUID
para instalar:
create extension if not exists "uudi-ossp";
select * from pg.available_extensions;
\df
select uuid_generate_v4();

person_uid UUID primary key nto null;
car_uid UUID references car(car_id);
UNIQUE(car_uid)
UNIQUE(email)

insert INTO person (person_uid) values (uuid_generate_v4());

select * from person left join car USING (car_uid); /// when columns are equals.  ?foreing and primary key?


____++_++++__________________________

ON DELETE

foreign key(car_uid) references person(car_uid) on delete set null;


++_+_+_+_+_+_+_+_+_+_+_+_

TRIGGERS

delimiter $$
 create 
   trigger my_trigger before insert
   on employee
     for each row begin 
   		insert into table_name values('added new empoyee');   /insert into table_name values(NEW.first_name);
     end$$

delimiter;



delimiter $$
 create 
   trigger my_trigger1 before insert
   on employee
     for each row begin 
		if NEW.sex = 'M' then 
		    insert into my_table values ('addeed MALE employee');
		elseif NEW.sex = 'F' then 
   		    insert into my_table values ('addeed FEMALE employee');
   		else 
  		    insert into my_table values ('addeed OTHER employee');
  		end if
     end$$
delimiter;














