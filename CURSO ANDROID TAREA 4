1. Herencia


Herencia en la programación orientada a objetos es la habilidad de extender una funcionalidad existente definiendo una nueva clase que hereda funcionalidad de una clase existente. Lo cual nos ahorrara mucho tiempo a los programadores.

Si contamos con una clase que se acerca a lo que necesitamos; no es necesario crear una clase desde cero. Podemos aprovecharla y extenderla para crear nuestra nueva clase. Esta nueva clase se llamara subclase y la clase que ya teníamos se llamara superclase.
La subclase heredara todos los atributos y los métodos que fueron definidos en la clase padre. Si necesitamos cambiar algún método, se puede sobrescribir el comportamiento en nuestra subclase; utilizando el mismo nombre y los mismos argumentos del método que se encuentra en la subclase. O bien si se requiere crear un nuevo método lo podemos incluir en nuestra subclase.

Una clase puede heredar atributos por dos superclases (clases padres). La herencia múltiple puede ser usada para agrupar atributos y métodos de distintas clases en una sola.


Ejemplo:

Las clases Entrenador, Masajista y Futbolista heredan atributos y métodos de la superclase SelecionFutbol



Pasado a código quedaría:

public class SeleccionDeFutbol{
  protected int id;
  protected String Nombre;
  protected int Edad;
  
  public void Concenterse(){
    ...
  }
  
  public void Viajar(){
    ...
  }
}


2. Extends
 
¿Qué es Extends?

Esta palabra reservada, indica a la clase hija cual va a ser su clase padre, es decir que por ejemplo en la clase Futbolista al poner "public class Futbolista extends SeleccionFutbol" le estamos indicando a la clase 'Futbolista' que su clase padre es la clase 'SeleccionFutbol' o dicho de otra manera para que se entienda mejor, al poner esto estamos haciendo un "copy-paste dinámico" diciendo a la clase 'Futbolista' que se 'copie' todos los atributos y métodos públicos o protegidos de la clase 'SeleccionFutbol'. De aquí viene esa 'definición' que dimos de que la herencia en un 'copy-paste dinámico'.


public class Futbolista extends SeleccionDeFutbol{
  ...
}


3. Super


¿Qué es Super?

La palabra super sirve para llamar al constructor de la clase padre. Quizás en el código que hemos puesto no se ha visto muy bien, pero a continuación lo mostramos de formas más clara, viendo el constructor de los objetos pasándole los atributos:



public class SeleccionDeFutbol{
 .....
 
 public SeleccionDeFutbol(){}
 
 public SeleccionDeFutbol(int id, String nombre, String apellidos, int edad){
  this.id = id:
  this.nombre = nombre;
  this.apellidos = apellidos;
  this.edad = edad;
 }
 
 ...
 
}



public class Futbolista extends SeleccionDeFutbol{
  ......
  
  public Futbolista(){
    super();
  }
  
  public Futbolista(int id, String nombre, String apellidos, int edad, int dorsal, String demarcacion){
    super(id,  nombre, apellidos, edad);
    this.dorsal = dorsal;
    this.demarcacion = demarcacion;
  }

}

4. Instanciación de objetos


Hasta aquí todo correcto, pero ahora vamos a ver como trabajamos con estas clases. 

Para ver este funcionamiento de forma clara y sencilla vamos a trabajar con un objeto de cada clase , vamos a ver como se crean ,de que forma ejecutan sus método. 

Para ello empecemos mostrando el siguiente fragmento de código:


Lo primero que vemos es que nos creamos un objeto de cada clase, pasándole los atributos al constructor como parámetro y después "sorprendentemente" los metemos en un "ArrayList" de objetos de la clase "SeleccionFutbol" que es la clase padre. 

Esto evidentemente te lo permite hacer ya que todos los objetos son hijos de la misma clase padre. 

Luego recorremos el ArrayList y ejecutamos sus métodos "comunes" como son el 'Concentrarse' y el 'Viajar'. Este código da como salida lo siguiente:

Como podemos observar, al ejecutar todos el mismo método de la clase padre el código puesto funciona correctamente.

Posteriormente vamos a ejecutar código especifico de las clases hijas, de ahí que ahora no podamos recorrer el ArrayList y ejecutar el mismo método para todos los objetos ya que ahora esos objetos son únicos de la clases hijas. 

El código es el siguiente:


Como vemos aunque el entrenador y los futbolistas asistan a un entrenamiento, los dos hacen una función diferente en el mismo, por tanto hay que hacer métodos diferente para cada una de las clases. 

Ya veremos cuando hablemos del polimorfismo que podremos ejecutar el mismo método para clases diferentes y que esos métodos hagan cosas distintas.

 Como resultado al código mostrado tenemos lo siguiente:
 
 
 
 5. Polimorfismo


Es la capacidad de los objetos de reaccionar de manera diferente a un mismo método basándose en las propiedades del objeto.

Polimorfismo de sobrecarga: 

ocurre cuando existen métodos con el mismo nombre y funcionalidad similar en clases totalmente independientes entre ellas.



Si bien tanto el caballo, como el auto o el avión pueden avanzar y frenar , no lo van a hacer de la misma manera ya que los atributos que los definen son totalmente diferentes entre si.

 6. Tarea


En esta tarea seguiremos trabajando en el proyecto de aerolineas FastWing con el objetivo es implementar la herencia y el polimorfismo implementando las siguientes condiciones:


    Herencia:

    Generar una clase "Persona" con las propiedades: id, nombre, apellido y DNI.
    Generar una clase "Piloto" que extiende de "Persona" con la propiedad agregada: Rango que puede ser capitán, primer oficial o copiloto.
    Modificar la clase Pasajero para que sus atributos puedan extender de la clase Persona y agregarle los propios como hemos observado anteriormente.


    Polimorfismo:

    Generar en la clase padre "Persona" 2 métodos: volar y  despachar equipaje.
    Si el método volar lo llama el Pasajero debe devolver un String que diga:

          El (Nombre del pasajero) + (Apellido del pasajero) esta viajando en el vuelo (Nro. de vuelo) con destino a (Destino de vuelo)

      3.Si el método vuelo lo llama el piloto debe devolver un String que diga:

         El piloto (Nombre del piloto) + (Apellido del piloto) esta llevando el vuelo (Nro. de vuelo) a (Destino de vuelo) con un total de (Cantidad de pasajeros) pasajeros.



Una vez realizadas estas tareas puedes entregar el zip.

7. Proyecto Integrador

Ahora deberás realizar un proyecto integrador en equipo con algunos compañeros donde aplicarán todos los conocimientos adquiridos hasta ahora.




